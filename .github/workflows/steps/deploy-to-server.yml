name: Deploy to Server
description: Deploy application to server using SSH
inputs:
  server-host:
    description: 'Server hostname or IP'
    required: true
  server-user:
    description: 'Server username'
    required: true
  dockerhub-username:
    description: 'Docker Hub username'
    required: true
  image-name:
    description: 'Docker image name'
    required: true
  deployment-path:
    description: 'Deployment path on server'
    required: false
    default: '/opt/app'

runs:
  using: composite
  steps:
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ inputs.server-host }} >> ~/.ssh/known_hosts
      shell: bash

    - name: Create deployment directory on server
      run: |
        ssh ${{ inputs.server-user }}@${{ inputs.server-host }} "mkdir -p ${{ inputs.deployment-path }}"
      shell: bash

    - name: Copy deployment files to server
      run: |
        scp docker-compose.yml ${{ inputs.server-user }}@${{ inputs.server-host }}:${{ inputs.deployment-path }}/
        scp init-db.sql ${{ inputs.server-user }}@${{ inputs.server-host }}:${{ inputs.deployment-path }}/ 2>/dev/null || true
        scp env.example ${{ inputs.server-user }}@${{ inputs.server-host }}:${{ inputs.deployment-path }}/ 2>/dev/null || true
        scp .env ${{ inputs.server-user }}@${{ inputs.server-host }}:${{ inputs.deployment-path }}/ 2>/dev/null || true
      shell: bash

    - name: Deploy to server
      run: |
        ssh ${{ inputs.server-user }}@${{ inputs.server-host }} << 'EOF'
          cd ${{ inputs.deployment-path }}
          
          # Check if docker-compose command exists, use docker compose if not
          if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          
          # Pull the latest image
          docker pull ${{ inputs.dockerhub-username }}/${{ inputs.image-name }}:latest
          
          # Stop existing containers
          $COMPOSE_CMD -f docker-compose.yml down
          
          # Start the application
          $COMPOSE_CMD -f docker-compose.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Show running containers
          $COMPOSE_CMD -f docker-compose.yml ps
        EOF
      shell: bash

    - name: Verify deployment
      run: |
        ssh ${{ inputs.server-user }}@${{ inputs.server-host }} << 'EOF'
          # Wait for application to start
          sleep 30
          
          # Check if docker-compose command exists, use docker compose if not
          if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          
          # Check if containers are running
          if $COMPOSE_CMD -f ${{ inputs.deployment-path }}/docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Deployment successful! Containers are running."
            
            # Test application health
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ Application health check passed!"
            else
              echo "⚠️ Application health check failed, but containers are running."
            fi
          else
            echo "❌ Deployment failed! Containers are not running."
            $COMPOSE_CMD -f ${{ inputs.deployment-path }}/docker-compose.yml logs
            exit 1
          fi
        EOF
      shell: bash 