name: Build and Deploy (Multi-Platform)

on:
  push:
    branches: [ main, master, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, dev ]

# Add permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: kevlar-gas-station-mis

jobs:
  # Test job using reusable workflow
  test:
    uses: kevlar-group/kevlar-github-actions/.github/workflows/test.yml@main
    with:
      java-version: '17'
      postgres-db: 'kevlar_gas_station_db'
      postgres-user: 'postgres'
      postgres-password: 'password'
    secrets: inherit

  # Build and push job using reusable workflow
  build-and-push:
    needs: test
    uses: kevlar-group/kevlar-github-actions/.github/workflows/build-and-push.yml@main
    with:
      registry: 'docker.io'
      image-name: 'kevlar-gas-station-mis'
      dockerfile: './Dockerfile'
    secrets:
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

  # Traditional Server Deployment (for Java applications)
  deploy-server:
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && vars.DEPLOYMENT_TYPE == 'server'
    uses: kevlar-group/kevlar-github-actions/.github/workflows/deploy.yml@main
    with:
      server-host: ${{ secrets.SERVER_HOST }}
      server-user: ${{ secrets.SERVER_USER }}
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      image-name: 'kevlar-gas-station-mis'
      deployment-path: '/opt/kevlar-gas-station'
      ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    secrets: inherit

  # Vercel Deployment (for React.js, Next.js, NestJS applications)
  deploy-vercel:
    needs: test
    if: vars.DEPLOYMENT_TYPE == 'vercel'
    uses: kevlar-group/kevlar-github-actions/.github/workflows/vercel-deploy.yml@main
    with:
      project-type: 'nextjs'  # Options: react, nextjs, nestjs
      vercel-project-id: ${{ vars.VERCEL_PROJECT_ID }}
      vercel-org-id: ${{ vars.VERCEL_ORG_ID }}
      vercel-project-name: ${{ vars.VERCEL_PROJECT_NAME }}
      node-version: '20'
      build-command: 'npm run build'
      api-url: 'https://station-mis-backend.kevlargroup.xyz/api'
    secrets:
      vercel-token: ${{ secrets.VERCEL_TOKEN }}

  # SonarQube analysis using reusable workflow
  # For Java projects
  sonarqube-java:
    needs: test
    if: vars.PROJECT_TYPE == 'java'
    uses: kevlar-group/kevlar-github-actions/.github/workflows/sonarqube.yml@main
    with:
      project-type: 'java'
      java-version: '17'
      sonar-project-key: ${{ vars.SONAR_PROJECT_KEY }}
      sonar-project-name: ${{ vars.SONAR_PROJECT_NAME }}
    secrets:
      sonar-token: ${{ secrets.SONAR_TOKEN }}
      sonar-host-url: ${{ secrets.SONAR_HOST_URL }}

  # SonarQube analysis for TypeScript/JavaScript projects
  sonarqube-js:
    needs: test
    if: vars.PROJECT_TYPE != 'java'
    uses: kevlar-group/kevlar-github-actions/.github/workflows/sonarqube.yml@main
    with:
      project-type: 'nextjs'  # Options: react, nextjs, nestjs
      sonar-project-key: ${{ vars.SONAR_PROJECT_KEY }}
      sonar-project-name: ${{ vars.SONAR_PROJECT_NAME }}
    secrets:
      sonar-token: ${{ secrets.SONAR_TOKEN }}
      sonar-host-url: ${{ secrets.SONAR_HOST_URL }}

  # Security scan (this part remains custom as it's not in your reusable workflows)
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    # Add specific permissions for this job
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # Don't fail the workflow if upload fails
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 