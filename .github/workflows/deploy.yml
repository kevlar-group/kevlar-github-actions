name: Deploy Job
on:
  workflow_call:
    inputs:
      image-name:
        description: 'Docker image name'
        required: true
        type: string
      deployment-path:
        description: 'Deployment path on server'
        required: false
        type: string
        default: '/opt/app'
    secrets:    
      ssh-private-key:
        description: 'SSH private key for server access'
        required: true
      server-host:
        description: 'Server hostname or IP'
        required: true
      server-user:
        description: 'Server username'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.ssh-private-key }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.server-host }} >> ~/.ssh/known_hosts

    - name: Create deployment directory on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.server-user }}@${{ secrets.server-host }} "mkdir -p ${{ inputs.deployment-path }}"

    - name: Copy deployment files to server
      run: |
        scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.server-user }}@${{ secrets.server-host }}:${{ inputs.deployment-path }}/
        scp -o StrictHostKeyChecking=no init-db.sql ${{ secrets.server-user }}@${{ secrets.server-host }}:${{ inputs.deployment-path }}/
        scp -o StrictHostKeyChecking=no env.example ${{ secrets.server-user }}@${{ secrets.server-host }}:${{ inputs.deployment-path }}/
        scp -o StrictHostKeyChecking=no .env ${{ secrets.server-user }}@${{ secrets.server-host }}:${{ inputs.deployment-path }}/

    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.server-user }}@${{ secrets.server-host }} << 'EOF'
          cd ${{ inputs.deployment-path }}
          
          # Check if docker-compose command exists, use docker compose if not
          if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          
          # Pull the latest image
          docker pull ${{ secrets.dockerhub-username }}/${{ inputs.image-name }}:latest
          
          # Stop existing containers
          $COMPOSE_CMD -f docker-compose.yml down
          
          # Start the application (docker-compose will automatically use .env file)
          $COMPOSE_CMD -f docker-compose.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Show running containers
          $COMPOSE_CMD -f docker-compose.yml ps
        EOF

    - name: Verify deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.server-user }}@${{ secrets.server-host }} << 'EOF'
          # Wait for application to start
          sleep 30
          
          # Check if docker-compose command exists, use docker compose if not
          if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi
          
          # Check if containers are running
          if $COMPOSE_CMD -f ${{ inputs.deployment-path }}/docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Deployment successful! Containers are running."
            
            # Test application health
            if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "✅ Application health check passed!"
            else
              echo "⚠️ Application health check failed, but containers are running."
            fi
          else
            echo "❌ Deployment failed! Containers are not running."
            $COMPOSE_CMD -f ${{ inputs.deployment-path }}/docker-compose.yml logs
            exit 1
          fi
        EOF